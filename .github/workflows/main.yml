name: DataMiner Major Change Checker

on:
  workflow_call:
    inputs:
      solution-path:
        description: 'Path to the solution file (.sln)'
        required: true
        type: string
        default: '.'

      output-directory:
        description: 'Directory for results'
        required: true
        type: string
        default: './mcc-results'

      use-catalog:
        description: 'Use Catalog API to download previous version'
        required: false
        type: boolean
        default: true

      catalog-id:
        description: 'Catalog ID for previous version'
        required: false  
        type: string

      old-protocol-path:
        description: 'Path to old protocol.xml (alternative to catalog)'
        required: false
        type: string

      output-file-name:
        description: 'Results file name'
        required: false
        type: string

      output-format:
        description: 'Comma-separated output formats (e.g. "JSON", "HTML" or "XML")'
        required: false
        type: string
        default: 'JSON'

      include-suppressed:
        description: 'Include suppressed results'
        required: false
        type: boolean
        default: false

      build-configuration:
        description: 'Build configuration'
        required: false
        type: string
        default: 'Release'

    secrets:
      catalog-api-key:
        description: 'Catalog API key'
        required: false

jobs:
  major-change-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build protocol to generate protocol.xml
        run: |
          # Build the solution to generate protocol.xml
          dotnet build "${{ inputs.solution-path }}" --configuration ${{ inputs.build-configuration }} -nodeReuse:false
          
          # Try to find and copy protocol.xml to root for the validator
          solutionDir=$(dirname "${{ inputs.solution-path }}")
          if [ -f "$solutionDir/protocol.xml" ]; then
            cp "$solutionDir/protocol.xml" ./protocol.xml
          elif [ -f "$solutionDir/Protocol.xml" ]; then
            cp "$solutionDir/Protocol.xml" ./protocol.xml
          else
            # Search recursively for protocol.xml
            protocolFile=$(find "$solutionDir" -name "protocol.xml" -o -name "Protocol.xml" | head -n 1)
            if [ -n "$protocolFile" ]; then
              echo "Found protocol file at: $protocolFile"
              cp "$protocolFile" ./protocol.xml
            else
              echo "Warning: No protocol.xml found after build. The validator may fail."
            fi
          fi

      - name: Install Validator Tool
        run: dotnet tool install --global Skyline.DataMiner.CICD.Tools.Validator --version 1.5.0-alpha

      - name: Create output directory
        run: mkdir -p ${{ inputs.output-directory }}

      - name: Determine command parameters
        id: params
        run: |
          # Start building the command
          CMD="dataminer-validator major-change-checker --mcc-solution-path \"${{ inputs.solution-path }}\" --mcc-output-directory \"${{ inputs.output-directory }}\""
          
          # Add optional parameters
          if [ -n "${{ inputs.output-file-name }}" ]; then
            CMD="$CMD --output-file-name \"${{ inputs.output-file-name }}\""
          fi

          # Handle output formats
          if [ -n "${{ inputs.output-format }}" ]; then
            IFS=',' read -ra FORMAT_ARRAY <<< "$(echo "${{ inputs.output-format }}" | tr -d ' ')"
            for format in "${FORMAT_ARRAY[@]}"; do
              CMD="$CMD --output-format $format"
            done
          fi

          if [ "${{ inputs.include-suppressed }}" = "true" ]; then
            CMD="$CMD --include-suppressed"
          fi

          # Determine which approach to use (catalog or old protocol path)
          if [ "${{ inputs.use-catalog }}" = "true" ] && [ -n "${{ inputs.catalog-id }}" ]; then
            CMD="$CMD --catalog-id \"${{ inputs.catalog-id }}\""
            if [ -n "${{ secrets.catalog-api-key }}" ]; then
              CMD="$CMD --catalog-api-key \"${{ secrets.catalog-api-key }}\""
            fi
          elif [ -n "${{ inputs.old-protocol-path }}" ]; then
            CMD="$CMD --mcc-old-protocol-path \"${{ inputs.old-protocol-path }}\""
          else
            echo "Error: Either catalog-id or old-protocol-path must be provided"
            echo "Use catalog approach: ${{ inputs.use-catalog }}"
            echo "Catalog ID provided: ${{ inputs.catalog-id }}"
            echo "Old protocol path provided: ${{ inputs.old-protocol-path }}"
            exit 1
          fi

          echo "command=$CMD" >> $GITHUB_OUTPUT
          echo "Full command to execute: $CMD"

      - name: Run Major Change Checker
        run: ${{ steps.params.outputs.command }}
        continue-on-error: true
        
      - name: Upload results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: major-change-checker-results
          path: ${{ inputs.output-directory }}/*
          retention-days: 30
        continue-on-error: true
        
      - name: Check for critical issues
        if: always()
        run: |
          if ls ${{ inputs.output-directory }}/*.json 1> /dev/null 2>&1; then
            CRITICAL_COUNT=$(jq '.CriticalIssueCount' ${{ inputs.output-directory }}/*.json 2>/dev/null || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "Found $CRITICAL_COUNT critical issues"
              exit 1
            else
              echo "No critical issues found"
            fi
          else
            echo "No results file found"
            exit 1
          fi
