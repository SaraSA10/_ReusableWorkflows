name: Connector Master Workflow

on:
  push:
    branches: [ "**" ]
    tags: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  validate_skyline_quality_gate:
    name: Validate Skyline Quality Gate
    runs-on: windows-latest
    env:
      CATALOG_ID: ${{ vars.CATALOG_IDENTIFIER }}
      CATALOG_API_KEY: ${{ secrets.CATALOG_API_KEY }}
      WORKSPACE: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Java (SonarCloud)
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Debug Secret
        shell: pwsh
        run: |
          if ($env:CATALOG_API_KEY) {
            Write-Host "✅ Catalog key is present. Length: $($env:CATALOG_API_KEY.Length)"
          } else {
            Write-Host "❌ Catalog key is EMPTY or unavailable!"
          }

      - name: Build Solution
        run: dotnet build --no-restore

      - name: Run Unit Tests
        run: dotnet test --no-build --logger trx

      - name: Run Connector Validator
        run: |
          dataminer-validator connector-validator `
            --cv-solution-path "." `
            --cv-output-directory "$env:WORKSPACE" `
            --output-file-name "validateResults"

      - name: Run Major Change Checker
        shell: pwsh
        run: |
          dataminer-validator major-change-checker `
            --mcc-solution-path "." `
            --mcc-output-directory "$env:WORKSPACE" `
            --output-file-name "mccResults" `
            --catalog-id "$env:CATALOG_ID" `
            --catalog-api-key "$env:CATALOG_API_KEY"

      - name: Quality Gate Check
        shell: python
        run: |
          import json, sys, os

          def fail(msg):
              print(f"❌ {msg}")
              sys.exit(1)

          results_file = os.path.join(os.environ["WORKSPACE"], "validateResults.json")
          mcc_file = os.path.join(os.environ["WORKSPACE"], "mccResults.json")

          with open(results_file) as f:
              results = json.load(f)
              if results.get("CriticalIssueCount", 0) > 0:
                  fail("Connector Validator found critical issues.")
              if results.get("MajorIssueCount", 0) > 0:
                  fail("Connector Validator found major issues.")

          with open(mcc_file) as f:
              mcc_results = json.load(f)
              if mcc_results.get("CriticalIssueCount", 0) > 0:
                  fail("MCC found critical issues.")
              if mcc_results.get("MajorIssueCount", 0) > 0:
                  fail("MCC found major issues.")

          print("✅ Quality Gate Passed.")

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: validation-results
          path: |
            ${{ github.workspace }}/validateResults.json
            ${{ github.workspace }}/mccResults.json

  artifact_creation:
    name: Create .dmprotocol Package
    runs-on: windows-latest
    needs: validate_skyline_quality_gate
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Create Package
        run: |
          dotnet tool install --global dataminer-packager
          dataminer-packager create --solution-path "." --output "./output"

      - uses: actions/upload-artifact@v4
        with:
          name: dmprotocol-package
          path: ./output/*.dmprotocol
